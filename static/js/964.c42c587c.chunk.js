(()=>{"use strict";var __webpack_modules__={486:(e,t,r)=>{var s,i,a,_,n,g;r.d(t,{Z:()=>h});class h{addTrigger(e){let{id:t,target:r,step:s,time:_}=e;void 0==this.trigger_registry.get(t)&&this.trigger_registry.set(t,new Map),void 0==this.trigger_registry.get(t).get(s)?(this.trigger_registry.get(t).set(s,new Map),this.trigger_registry.get(t).get(s).set(_,new Uint8Array([r]))):void 0==this.trigger_registry.get(t).get(s).get(_)?this.trigger_registry.get(t).get(s).set(_,new Uint8Array([r])):0==(i=this.trigger_registry.get(t).get(s).get(_)).includes(r)?((a=new Array(i)).push(r),a=new Uint8Array(a),this.trigger_registry.get(t).get(s).set(_,a)):console.warn(`trigger already exists: target ${r} in timeframe ${_} in step ${s} on animation with id ${t}`)}removeTrigger(e){let{id:t,target:r,step:s,time:a}=e;if(void 0==(i=this.trigger_registry.get(t).get(s)))return console.warn("the trigger registr has does not include the step");if(void 0==i.get(a))return console.warn("the slected timeframe in the  step does not include the target");const _=(i=i.get(a)).indexOf(r);if(void 0!=_&&i.length>1){const e=new Uint8Array(new Array(i).splice(_,1));console.log(`removed trigger target ${r} in timeframe ${a} in step ${s} from from id ${t}`),this.trigger_registry.get(t).get(s).set(a,e)}else this.trigger_registry.get(t).get(s).set(a,void 0)}update(e,t){t.map((t=>{this.sequence_registry.lengths[t.id]!=t.values.length-1&&(1==this.lerp_registry.loop[t.id]&&(this.removeTrigger({id:t.id,target:t.id,step:this.sequence_registry.lengths[t.id]-1,time:this.lerp_registry.duration[t.id]}),this.addTrigger({id:t.id,target:t.id,step:t.values.length-2,time:this.lerp_registry.duration[t.id]})),this.sequence_registry.lengths[t.id]=t.values.length-1),2==e?t.values.map(((e,r)=>{this.sequence_registry.buffer[this.lerp_registry.lerp_chain_start[t.id]+r]=e})):3==e&&t.values.map(((e,r)=>{this.sequence_registry.matrix_sequences.get(t.id).set(r,e)})),this.sequence_registry.reset(t.id)}))}lambda_call(e,t){try{return this.callback_map.get(e)(t)}catch(r){console.error("error in lambda call",e),console.error(this.callback_map.get(e)),console.error(r)}}start_loop(){null==this.loop_resolver&&this.animateLoop()}stop_loop(){null!=this.loop_resolver&&(this.loop_resolver.abort(),this.loop_resolver=null)}start_animations(e){e.map((e=>{this.lerp_registry.delete_group_member(e),this.sequence_registry.soft_reset(e)})),this.start_loop()}stop_animations(e){"all"===e?(this.lerp_registry.stop_all(),this.stop_loop()):(e.map((e=>{this.lerp_registry.deactivate(e)})),0==this.lerp_registry.active_numbers.length&&0==this.lerp_registry.active_timelines.size&&0==this.lerp_registry.active_matrices.size&&0==this.lerp_registry.active_groups.size&&this.stop_loop())}reset_animations(e){"all"==e&&(void 0!=this.sequence_registry?this.sequence_registry.stop_loop():this.stop_loop(),e=this.lerp_registry.type.map(((e,t)=>t)));var t=0;const r={number_results:new Map,matrix_results:new Map};e.map((e=>{switch(this.sequence_registry.reset(e),this.lerp_registry.activate(e),this.lerp_registry.type[e]){case 2:r.number_results.set(e,this.sequence_registry.buffer[this.lerp_registry.lerp_chain_start[e]]),t+=1;break;case 3:r.matrix_results.set(e,this.sequence_registry.matrix_sequences.get(e).get(0)),t+=1}})),null==this.loop_resolver&&t>0&&postMessage({message:"render",number_results:r.number_results,matrix_results:r.matrix_results})}change_framerate(e){this.fps=e}render_constant(e,t){postMessage({message:"render_constant",id:e,type:t,value:get_constant(e,t)})}setLerp(e,t,r){this.sequence_registry.buffer[this.lerp_registry.lerp_chain_start[e]+t]=r}setMatrix(e,t,r){try{r.map(((r,s)=>{this.sequence_registry.matrix_sequences.get(e).get(t)[s]=r}))}catch(s){console.error(` error in setMatrix:\n            ${s}`)}}update_constant(e,t,r){this.constant_registry.update(t,e,r)}get_constant(e,t){return this.constant_registry.get(t,e)}get_time(e){return this.lerp_registry.progress[e]}is_active(e){if(this.lerp_registry.active_groups.has(this.lerp_registry.group.has(e))&&this.lerp_registry.active_group_indices.get(this.lerp_registry.group.get(e)).has(e))return this.lerp_registry.active_group_indices.get(this.lerp_registry.group.get(e)).has(e);switch(s=this.lerp_registry.type[e]){case 3:return this.lerp_registry.active_numbers.includes(e);case 3:return this.lerp_registry.active_matrices.has(e)}}get_step(e){return this.sequence_registry.progress(e)}get_lerp_value(e){if(s=this.lerp_registry.type[e],(_=this.lerp_registry.group.get(e))&&this.lerp_registry.active_groups.has(e))return this.lerp_registry.active_group_indices.get(_).has(e);switch(s){case 2:return this.lerp_registry.number_results.get(e);case 3:return this.lerp_registry.matrix_results.get(e)}}soft_reset(e){this.sequence_registry.soft_reset(e)}hard_reset(e){this.sequence_registry.reset(e)}set_time(e,t){this.lerp_registry.progress=t}set_step(e,t){this.sequence_registry.progress[e]=t>this.sequence_registry.lengths[e]?this.sequence_registry.lengths[e]:t}set_sequence_start(e,t){this.lerp_registry.lerp_chain_start[e]=t}get_sequence_start(e){return this.lerp_registry.lerp_chain_start[e]}set_sequence_length(e,t){this.sequence_registry.lengths[e]=t}get_sequence_length(e){return this.sequence_registry.lengths[e]}get_step_lerp_target_value(e,t){return 2==this.lerp_registry.type[e]?this.sequence_registry.buffer[this.lerp_registry.lerp_chain_start[e]+t]:3==this.lerp_registry.type[e]?this.sequence_registry.matrix_sequences.get(e).get(t):void 0}get_duration(e){return this.lerp_registry.duration[e]}set_duration(e,t){this.lerp_registry.duration[e]=t}get_delay(e){return this.lerp_registry.delay[e]}set_delay(e,t){this.lerp_registry.delay[e]=t}get_delay_delta(e){return this.lerp_registry.delay_delta[e]}set_delay_delta(e,t){this.lerp_registry.delay_delta[e]=t}get_constant_row(e,t){return this.constant_registry.get_row(e,t)}get_constant_number(e){return this.constant_registry.get_number(e)}get_active_group_indices(e){return this.lerp_registry.active_groups.get(e)}get_active(e){switch(e){case 2:return this.lerp_registry.active_numbers;case 3:return this.lerp_registry.active_matrices;case 4:return this.lerp_registry.active_timelines}}get_status(){return null!=this.loop_resolver}reorient_target(e){let{index:t,step:r=0,direction:s=1,reference:i,matrix_row:a=0,start_reference:_,verbose:n=!1}=e;n&&console.log("replacing indices "+t),2!=this.lerp_registry.type[t]?(_?this.setMatrix(t,r,_):this.setMatrix(t,r,this.get_lerp_value(t)),this.setMatrix(t,r+s,i,a)):(this.setLerp(t,r,i),this.setLerp(t,r+s,a))}reorient_duration(e){let{index:t,min_duration:r,max_duration:s,verbose:i=!1}=e;if(void 0!=r){this.soft_reset(t);const e=this.is_active(t)?this.get_time(t):0,a=e<r?Math.floor(s-e):s;this.set_duration(t,a),i&&console.log("new start_duration for "+t+" is "+a)}}lerp(e,t,r,s,i){const a=(e-r)/(s-r);return t*a+(1-a)*i}normalizeDistance(e,t,r){return Math.abs(t-e)/Math.abs(r-e)}clamp(e,t,r){return Math.min(Math.max(e,t),r)}reorient_duration_by_distance(e){let{index:t,target:r,max_distance:s,min_duration:i,max_duration:a,mode:_="max_distance",reorientate_steps:h=!1}=e;const o=this.get_lerp_value(t);var l;if(2!=this.lerp_registry.type[t])switch(_){case"max_distance":const e=[];l=[];for(let a=0;a<r.length;a++)e.push(Math.abs(r[a]-o[a])),l.push(r[a]-o[a]);n=Math.max(...e);break;case"manhattan_distance":n=0,l=[];for(let a=0;a<r.length;a++)n+=Math.abs(r[a]-o[a]),l.push(r[a]-o[a]);break;case"cosine_similarity":const t=0,s=0,i=0;l=[];for(let a=0;a<r.length;a++)t+=r[a]*o[a],l.push(r[a]-o[a]),s+=r[a]**2,i+=o[a]**2;s=Math.sqrt(s),i=Math.sqrt(i),n=1-t/(s*i);break;case"vector_magnitude":n=0,l=[];for(let a=0;a<r.length;a++)n+=(r[a]-o[a])**2,l.push(r[a]-o[a]);n=Math.sqrt(n);break;default:throw new Error(`Unbekannter Modus: ${_}`)}else 2==this.lerp_registry.type[t]&&(n=Math.abs(r-s));return g=i+n/s*(a-i),this.soft_reset(t),this.set_duration(t,g),{duration:g,diffrences:l}}reorient_duration_by_progress(e){let{index:t,min_duration:r,max_duration:s,soft_reset:i=!0}=e;const a=this.get_time(t)/s;return g=r+a*(s-r),i&&this.soft_reset(t),this.set_duration(t,g),g}reverse(e){if("number"!=s(e))for(let t=this.lerp_registry.lerp_chain_start[e];t<=this.lerp_registry.lerp_chain_start[e]+this.sequence_registry.lengths[e];t++)this.sequence_registry.buffer[this.sequence_registry.lengths[e]-t]=this.sequence_registry.buffer[t];else{const t=new Map;this.sequence_registry.matrix_sequences.get(e).forEach(((r,s)=>{t.set(this.sequence_registry.lengths[e]-s,r)})),this.sequence_registry.matrix_sequences.set(e,t)}}reverse_group_delays(e){this.matrix_chain_registry.indices.get(e).map(((t,r)=>{const s=this.matrix_chain_registry.indices.get(e).length-r,i=this.matrix_chain_registry.indices.get(e)[s-1],a=this.get_delay(i);this.set_delay(i,this.get_delay(t)),this.set_delay(t,a)}))}set_group_orientation(e,t){this.matrix_chain_registry.orientation_step.set(e,t)}start_group(e,t,r){t.map(((t,s)=>{this.lerp_registry.active_groups.has(s)||this.matrix_chain_registry.start_matrix_chain(e[s],t,r)})),this.start_loop()}reset_group(e,t,r){this.matrix_chain_registry.reset_group(e,t,r)}stop_group(e){"all"==e&&(e=[...this.lerp_registry.active_groups]),e.map(((e,t)=>{this.lerp_registry.active_groups.has(e)&&(this.lerp_registry.active_groups.delete(e),this.lerp_registry.active_group_indices.get(e).clear(),this.matrix_chain_registry.progress[e]=0,this.stop_animations(this.matrix_chain_registry.indices.get(e)))}))}get_group_values(e){return{active:this.lerp_registry.active_groups.has(e),progress:this.matrix_chain_registry.progress[e],orientation:this.matrix_chain_registry.orientation_step.get(e),active_indices:this.lerp_registry.active_group_indices.get(e),loop:this.matrix_chain_registry.group_loop[e]}}set_group_values(e,t,r,s){switch(t){case"max_duration":this.matrix_chain_registry.max_duration[e]=r;break;case"min_duration":this.matrix_chain_registry.min_duration[e]=r;break;case"progress":this.matrix_chain_registry.progress[e]=r;break;case"sequence_length":this.matrix_chain_registry.sequence_length[e]=r;break;case"group_loop":this.matrix_chain_registry.group_loop[e]=r;case"orientation_step":this.matrix_chain_registry.orientation_step.set(e,r);break;case"ref_matrix":if(1==this.matrix_chain_registry.uni_size[e])this.matrix_chain_registry.ref_matrix.get(e).get(s).map(((t,i)=>{this.matrix_chain_registry.ref_matrix.get(e).get(s)[i]=r[i]}));else{const t=this.matrix_chain_registry.max_length[e];this.matrix_chain_registry.ref_matrix.get(e).set(e*t+s).map(((e,t)=>r[t]))}}}}}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](r,r.exports,__webpack_require__),r.exports}__webpack_require__.d=(e,t)=>{for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__={},kooljs_worker_utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(486),triggers_step,animator,active_index,triggers_step;class Lerp extends kooljs_worker_utils__WEBPACK_IMPORTED_MODULE_0__.Z{constructor(e,t,r,s,i,a,_,n,g,h,o,l,p,c){super(),this.type=r,this.duration=s,this.matrix_chain_groups=void 0,this.render_interval=i,this.delay_delta=_,this.delay=a,this.progress=n,this.smoothstep=g,this.matrix_chain_registry=void 0,this.lerp_chain_start=h,this.loop=o,this.group=l,this.group_lookup=p,this.active_groups=new Set,this.active_group_indices=new Map,this.active_timelines=new Set,this.active_matrices=new Set,this.active_numbers=[],this.active_group_indices_render=new Map,this.group_results_render=new Map,this.matrix_results_render=new Map,this.number_results_render=new Map,this.matrix_results=e.get("matrix_results"),this.number_results=e.get("number_results"),this.group_results=new Map,this.lerp_callbacks=new Map,this.loop_resolver=null,c.forEach(((e,r)=>{this.lerp_callbacks.set(r,t.get(e))}))}activate(e){switch(this.type[e]){case 2:return 0!=this.active_numbers.includes(e)||(this.active_numbers=Uint8Array.from([...this.active_numbers,e]),this.number_results_render.delete(e),!1);case 3:return 0!=this.active_matrices.has(e)||(this.active_matrices.add(e),this.matrix_results_render.set(e,new Map),!1);case 4:return 0!=this.active_timelines.has(e)||(this.active_timelines.add(e),!1)}}delete_group_member(e){if(this.group.has(e)){const t=this.group.get(e);return!!this.active_groups.has(t)&&(this.active_group_indices.get(t).delete(e),this.group_results_render.get(t).delete(this.group_lookup.get(e)),0==this.active_group_indices.get(t).size&&this.matrix_chain_registry.update_group(t),!0)}return!1}deactivate(e){switch(this.type[e]){case 3:0==this.delete_group_member(e)&&(this.active_matrices.delete(e),this.matrix_results_render.delete(e));break;case 2:active_index=this.active_numbers.indexOf(e),this.active_numbers=Uint8Array.from([...this.active_numbers.slice(0,active_index),...this.active_numbers.slice(active_index+1,this.active_numbers.length)]),this.number_results_render.delete(e);break;case 4:this.active_timelines.delete(e)}}stop_all(){this.active_numbers=[],this.active_matrices.clear(),this.active_timelines.clear(),this.active_groups.clear(),this.active_groups.forEach(((e,t)=>{this.active_group_indices.get(t).clear()})),this.group_results_render.clear(),this.matrix_results_render.clear(),this.number_results_render.clear()}}const default_target_step=[0,1];var final_step,final_sub_step,indices,t,targets,allow_render,args,delta_t,res,startTime,timeoutId,indices,buffer,const_map_new;class LerpSequence extends kooljs_worker_utils__WEBPACK_IMPORTED_MODULE_0__.Z{constructor(e,t,r,s,i){super(),this.buffer=e,this.matrix_sequences=t,this.progress=r,this.lengths=s,this.lerp_registry=i.lerp_registry}update_progress(e){if(this.progress[e]!=this.lengths[e]-1)return this.reset_and_update(e),!1;this.stop_animations([e])}reset_and_update(e){this.lerp_registry.delay_delta[e]=0,this.lerp_registry.progress[e]=0,this.progress[e]+=1}reset(e){switch(this.lerp_registry.type[e]){case 2:this.lerp_registry.number_results[e]=this.buffer[this.lerp_registry.lerp_chain_start[e]];break;case 3:this.lerp_registry.group.get(e)||this.lerp_registry.matrix_results.set(e,this.matrix_sequences.get(e).get(0))}this.lerp_registry.delay_delta[e]=0,this.lerp_registry.progress[e]=0,this.progress[e]=0}soft_reset(e){0==this.lerp_registry.activate(e)&&(final_step=this.progress[e]==this.lengths[e]-1,final_sub_step=this.lerp_registry.progress[e]>=this.lerp_registry.duration[e],final_step&&final_sub_step?this.reset(e):final_sub_step&&this.reset_and_update(e))}}class Matrix_Chain extends kooljs_worker_utils__WEBPACK_IMPORTED_MODULE_0__.Z{constructor(e,t,r,s,i,a,_,n,g,h,o){super(),this.indices=e,this.ref_matrix=t,this.orientation_step=s,this.max_duration=i,this.min_duration=a,this.uni_size=r,this.max_length=g,this.custom_delay=_,this.progress=new Uint8Array(e.size).fill(0,0,e.length),this.sequence_length=h,this.lerp_registry=o.lerp_registry,this.group_loop=n,this.sequence_registry=o.sequence_registry,this.constant_registry=o.constant_registry,this.lerp_registry=o.lerp_registry,this.start_loop=o.start_loop,this.callback_map=o.callback_map,this.result_map=new Map,e.forEach(((e,r)=>{this.lerp_registry.active_group_indices.set(r,new Set),this.lerp_registry.group_results.set(r,new Map),e.map(((e,s)=>{this.lerp_registry.group_results.get(r).set(s,t.get(r).get(s))}))}))}reorient_matrix_chain(e){let{id:t,target_step:r,direction:s,reorientate:i}=e;var a=this.indices.get(t);a.map(((e,_)=>{var n,g=this.ref_matrix.get(t);const h=this.get_lerp_value(e);var o;if(o=1==this.uni_size[t]?0:_*this.max_length[t],this.lerp_registry.active_group_indices.get(t).add(e),"progress"!=i&&(n=g.get(r[1==s?0:1]+o)),(g=g.get(r[s]+o))==h)return console.log("target animation is reachead");if(this.hard_reset(e),i&&this.reorient_target({index:e,step:0,direction:1,matrix_row:0,verbose:!1,reference:g,start_reference:n}),255!=this.custom_delay[t]){const i=this.lambda_call(this.custom_delay[t],{animation_index:e,index:_,indices:a,progress:this.progress[t],direction:s,target_step:r})||0;this.set_delay(e,i)}"progress"==i&&this.reorient_duration_by_progress({index:e,min_duration:this.min_duration[t],max_duration:this.max_duration[t],soft_reset:!1})}))}reset_group(e,t,r){if(void 0!=t){if(t==r||void 0==this.ref_matrix.get(e).get(t)||void 0==this.ref_matrix.get(e).get(r))return console.log("start or target is not valie");var s=this.indices.get(e);s.map(((s,i)=>{var a,_,n=this.ref_matrix.get(e);_=1==this.uni_size[e]?0:i*this.max_length[e],a=n.get(t+_),n=n.get(r+_),this.hard_reset(s),this.setMatrix(s,0,a),this.setMatrix(s,1,n)}))}else s.map(((e,t)=>{this.hard_reset(e)}))}start_matrix_chain(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"progress";this.result_map.clear();const s=this.orientation_step.get(t);this.lerp_registry.group_results_render.set(t,this.result_map),this.reorient_matrix_chain({id:t,direction:e,target_step:s,reorientate:r}),this.lerp_registry.active_groups.add(t)}group_set(e){const t=this.ref_matrix.get(e);this.indices.get(e).map(((r,s)=>{var i;const a=(i=1==this.uni_size[e]?0:s*this.max_length[e])+this.progress[e],_=i+this.progress[e]+1,n=t.get(a),g=t.get(_);this.setMatrix(r,0,n),this.setMatrix(r,1,g),this.lerp_registry.active_group_indices.get(e).add(r),this.hard_reset(r)}))}update_group(e){this.progress[e]+=1,this.progress[e]>=this.sequence_length[e]?(this.progress[e]=0,1==this.group_loop[e]?(this.orientation_step.set(e,[0,1]),1==this.sequence_length[e]?this.start_matrix_chain(1,e,!0):this.group_set(e)):this.lerp_registry.active_groups.delete(e)):this.group_set(e)}}class Constant extends kooljs_worker_utils__WEBPACK_IMPORTED_MODULE_0__.Z{constructor(e,t){super(),this.reg=new Map,this.reg.set("matrix",new Map),this.reg.set("number",void 0),this.render_triggers=new Map,this.render_callbacks=new Map,this.animator=t,void 0!=e.get("matrix")&&e.get("matrix").forEach(((e,t)=>{this.reg.get("matrix").set(t,new Map),e.map(((e,r)=>{this.reg.get("matrix").get(t).set(r,new Float32Array(e))}))})),void 0!=e.get("number")&&this.reg.set("number",e.get("number")),this.render_triggers=e.get("render_triggers"),this.render_callbacks=e.get("render_callbacks")}update(e,t,r){this.reg.get(e).set(t,r),this.render_callbacks.has(t)&&this.render_callbacks.get(t).map((e=>{this.animator.callback_map.get(e.id)(e.args)})),this.render_triggers.has(t)&&this.animator.start_animations(this.render_triggers.get(t))}get(e,t,r){if(void 0==r)return this.reg.get(e).get(t);this.get_row(t,r)}get_row(e,t){return this.reg.get("matrix").get(e).get(t)}get_number(e){return this.reg.get("number").get(e)}}function smoothLerp(e,r,s,i){return r*(t=smoothstep(s))+e*(1-t)}function smoothstep(e){return e*e*(3-2*e)}class Animator extends kooljs_worker_utils__WEBPACK_IMPORTED_MODULE_0__.Z{constructor(new_fps,lerps,lerpChains,results,triggers,constants,condi_new,matrix_chains,springs){super(),this.fps=new_fps,this.callback_map=new Map,this.trigger_registry=new Map,this.callback_map=new Map,this.update_group=void 0,triggers.forEach(((e,t)=>this.trigger_registry.set(t,e))),condi_new.forEach(((val,key)=>{try{this.callback_map.set(key,eval(val))}catch(err){console.error("failed to eval callback function on the worker for: "+key),console.error(val),console.error(err)}})),this.lerp_registry=new Lerp(results,this.callback_map,lerps.get("type"),lerps.get("duration"),lerps.get("render_interval"),lerps.get("delay"),lerps.get("delay_delta"),lerps.get("progress"),lerps.get("smoothstep"),lerps.get("lerp_chain_start"),lerps.get("loop"),lerps.get("group"),lerps.get("group_lookup"),lerps.get("lerp_callbacks"),this),this.sequence_registry=new LerpSequence(lerpChains.get("buffer"),lerpChains.get("matrix_buffer"),lerpChains.get("progress"),lerpChains.get("lengths"),this),this.matrix_chain_registry=new Matrix_Chain(matrix_chains.get("indices"),matrix_chains.get("ref_matrix"),matrix_chains.get("uni_size"),matrix_chains.get("orientation_step"),matrix_chains.get("max_duration"),matrix_chains.get("min_duration"),matrix_chains.get("custom_delay"),matrix_chains.get("group_loop"),matrix_chains.get("max_length"),matrix_chains.get("sequence_length"),this),this.update_group=this.matrix_chain_registry.update_group,this.lerp_registry.matrix_chain_registry=this.matrix_chain_registry,this.start_matrix_chain=this.matrix_chain_registry.start_matrix_chain,this.lerp_registry.matrix_chain_registry=this.matrix_chain_registry,this.constant_registry=new Constant(constants,this),this.animateLoop=async function(){try{for(this.loop_resolver=new AbortController,this.loop_resolver.signal.addEventListener("abort",(()=>{clearTimeout(timeoutId)}));0==this.loop_resolver.signal.aborted;){if(startTime=performance.now(),this.lerp_registry.active_timelines.forEach((e=>this.animate(e))),this.lerp_registry.active_numbers.map(((e,t)=>this.animate(e,this.animate_number,this.lerp_registry.number_results,2,t))),this.lerp_registry.active_matrices.forEach((e=>this.animate(e,this.animate_matrix,this.lerp_registry.matrix_results,3))),this.lerp_registry.active_groups.forEach((e=>{this.lerp_registry.active_group_indices.get(e).forEach(((t,r)=>{this.animate(t,this.animate_matrix,this.lerp_registry.matrix_results,0,e,r)}))})),this.render(),!(this.lerp_registry.active_groups.size>0||this.lerp_registry.active_timelines.size>0||this.lerp_registry.active_matrices.size>0||this.lerp_registry.active_numbers.length>0))return this.stop_loop();await new Promise(((e,t)=>{timeoutId=setTimeout((()=>{e()}),Math.max(0,this.fps-(performance.now()-startTime)))}))}}catch{}},this.animate_matrix=(e,t,r)=>{for(let s=0;s<this.sequence_registry.matrix_sequences.get(e).get(this.sequence_registry.progress[e]).length;s++)r.get(e)[s]=smoothLerp(this.sequence_registry.matrix_sequences.get(e).get(this.sequence_registry.progress[e])[s],this.sequence_registry.matrix_sequences.get(e).get(this.sequence_registry.progress[e]+1)[s],t,this.lerp_registry.smoothstep[e])},this.animate_number=(e,t,r,s)=>{r[e]=smoothLerp(this.sequence_registry.buffer[this.lerp_registry.lerp_chain_start[e]+this.sequence_registry.progress[e]],this.sequence_registry.buffer[this.lerp_registry.lerp_chain_start[e]+this.sequence_registry.progress[e]+1],t,this.lerp_registry.smoothstep[e]),this.lerp_registry.number_results_render.set(e,r[e])},this.animate=async function(e,t,r,s,i){if(this.lerp_registry.progress[e]<=this.lerp_registry.duration[e])if(this.lerp_registry.delay_delta[e]<this.lerp_registry.delay[e]-1)this.lerp_registry.delay_delta[e]+=1;else if(0==this.lerp_registry.delay_delta[e]||this.lerp_registry.delay_delta[e]<this.lerp_registry.delay[e]){if(this.lerp_registry.delay_delta[e]+=1,void 0!=t)switch(s){case 0:this.lerp_registry.group_results_render.get(i).set(this.lerp_registry.group_lookup.get(e),this.lerp_registry.matrix_results.get(e));break;case 2:this.lerp_registry.number_results_render.set(e,this.lerp_registry.number_results[e]);break;case 3:this.lerp_registry.matrix_results_render.set(e,this.lerp_registry.matrix_results.get(e))}}else{if(0==(allow_render=this.lerp_registry.progress[e]%this.lerp_registry.render_interval[e])&&(delta_t=this.lerp_registry.progress[e]/this.lerp_registry.duration[e],void 0!=t&&(res=t(e,delta_t,r,i)),args={id:e,value:res,step:this.sequence_registry.progress[e],time:this.lerp_registry.progress[e],step:this.sequence_registry.progress[e]},this.lerp_registry.lerp_callbacks.has(e)))try{this.lerp_registry.lerp_callbacks.get(e)(args)}catch(a){console.error(`got Error calling lambda number: ${e} \nFunction: ${this.lerp_registry.lerp_callbacks.get(e)}\nargs: ${JSON.stringify(args)}\nerror: ${a}\n-------------\nstopping animator now!\n                                `),this.stop_animations("all")}this.lerp_registry.progress[e]+=1,0==allow_render&&void 0!=(triggers_step=void 0!=this.trigger_registry.get(e)?this.trigger_registry.get(e).get(this.sequence_registry.progress[e]):void 0)&&(targets=triggers_step.get(this.lerp_registry.progress[e]-1))&&targets.map((t=>{t==e?(this.hard_reset(t),this.lerp_registry.number_results_render.delete):this.soft_reset(t)}))}else this.sequence_registry.update_progress(e)},this.render=()=>{postMessage({message:"render",number_results:this.lerp_registry.number_results_render,matrix_results:this.lerp_registry.matrix_results_render,group_results:this.lerp_registry.group_results_render})}}}onmessage=event=>{switch(event.data.method){case"init":animator=new Animator(event.data.fps,event.data.data,event.data.chain_map,event.data.results,event.data.trigger_map,event.data.constants,event.data.callback_map,event.data.matrix_chain_map,event.data.spring_map);break;case"update":animator.update(event.data.type,event.data.data);break;case"update_constant":"matrix"==event.data.type?(const_map_new=new Map,event.data.value.map(((e,t)=>{""!=typeof e&&(event.data.value[t]=new Float32Array(e)),const_map_new.set(t,event.data.value[t])})),animator.constant_registry.update(event.data.type,event.data.id,const_map_new)):animator.constant_registry.update(event.data.type,event.data.id,event.data.value);break;case"start":animator.start_loop();break;case"set_lambda":animator.callback_map.set(event.data.id,eval(event.data.callback));break;case"stop":animator.stop_loop();break;case"change_framerate":animator.change_framerate(event.data.fps_new);break;case"lambda_call":animator.lambda_call(event.data.id,event.data.args);break;case"start_animations":animator.start_animations(event.data.indices);break;case"stop_animations":animator.stop_animations(event.data.indices);break;case"start_groups":animator.start_group(event.data.directions,event.data.indices,event.data.reorientate,event.data.use_start_reference);break;case"stop_groups":animator.stop_group(event.data.indices);break;case"set_group_orientation":animator.set_group_orientation(event.data.index,event.data.orientation);break;case"reset_animations":animator.reset_animations(event.data.indices);break;case"set_group":animator.set_group_values(event.data.id,event.data.field,event.data.value,event.data.step);case"addTrigger":animator.addTrigger({id:event.data.id,target:event.data.target,step:event.data.step,time:event.data.time});break;case"removeTrigger":animator.removeTrigger({id:event.data.id,target:event.data.target,step:event.data.step,time:event.data.time});break;default:console.warn("no method selected during worker call")}};class Spring{constructor(e,t,r,s){this.elements=e,this.duration=t,this.spring_tension=r}}function shortest_path(){}function knn(){}function convex_hull(){}function spring(){}})();
//# sourceMappingURL=964.c42c587c.chunk.js.map